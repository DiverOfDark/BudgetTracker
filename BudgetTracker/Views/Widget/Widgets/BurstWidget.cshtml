@using System.Globalization
@using Controllers.ViewModels.Widgets
@model BurstWidgetViewModel

@{
    var chartId = Guid.NewGuid().ToString("N");
    <style>
    
        .links line {
            stroke-opacity: 0.6;
            pointer-events: none;
        }

        .nodes circle {
            stroke: black;
            stroke-width: 1.5px;
        }

        .text text {
            pointer-events: none;
            stroke: #aaa;
            stroke-width: 1px;
            font-weight: 800;
            fill: black;
            paint-order: stroke;
            stroke-linecap: butt;
            stroke-linejoin: miter;
        }    
    </style>
    <div class="card-body">
        <div class="h4 text-muted-dark text-center">
            @Model.Title
        </div>
    </div>
    <div class="card-chart-bg" style="height: 100%; text-align: center;">
        <svg id="burst-@chartId" width="960" height="800"></svg>
    </div>
    <script type="text/javascript">
        (function() {
            var rootNode = @Json.Serialize(Model.RootNode);
            var chartId = 'burst-@chartId';

            var svg = d3.select("#" + chartId),
                width = +svg.attr("width"),
                height = +svg.attr("height");
            
            var g = svg.append("g");
            
            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function(d) { return d.node; }).distance(0))
                .force("charge", d3.forceManyBody().strength(-200).distanceMax(2000).distanceMin(1))
                .force("center", d3.forceCenter(width / 2, height / 2));

            var nodeArr = [];
            var linksArr = [];

            var colors = [];
            
            for (var color in window.tabler.colors) {
                colors.push(window.tabler.colors[color]);
            }
            
            function shuffleArray(array) {
                for (var i = array.length - 1; i > 0; i--) {
                    var j = Math.floor(Math.random() * (i + 1));
                    var temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
            }

            shuffleArray(colors);
            var radius = 20;

            var nodeFunc = function(node) {
                var item = { 
                    x: width/2,
                    y: height/2,
                    node: node,
                    color: colors.pop()
                };
                nodeArr.push(item);

                for(var child in node.children) {

                    var to = nodeFunc(node.children[child]);

                    linksArr.push({
                        source: item,
                        target: to
                    });
                }
                
                return item;
            };

            nodeFunc(rootNode);

            var link = g.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(linksArr)
                .enter().append("line")
                .attr("stroke-width", function(d) { return Math.log(d.target.node.amount); })
                .attr("stroke", function(d) { return d.source.color; });
            
            var nodeObj = g.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodeArr)
                .enter().append("circle")
                .attr("r", function(d) { return Math.log(d.node.amount)})
                .attr('fill', function(d) { return d.color; })
                .call(d3.drag()
                    .on("start", function(d) {
                        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                        d.fx = d.x;
                        d.fy = d.y;
                    })
                    .on("drag", function(d) {
                        d.fx = Math.max(radius, Math.min(width - radius, d3.event.x));
                        d.fy = Math.max(radius, Math.min(height - radius, d3.event.y));;
                    })
                    .on("end", function(d) {
                        if (!d3.event.active) simulation.alphaTarget(0);
                        d.fx = null;
                        d.fy = null;
                    }));
            
            nodeObj.append("title").text(function(d) { return d.node.title + ": " + d.node.amount; });

            var textElements = g.append('g')
                .attr("class", "text")
                .selectAll('text')
                .data(nodeArr)
                .enter()
                .append('text')
                .attr('font-size', 15)
                .attr('dx', 20)
                .attr('dy', -5)
                .attr('font-weight', 'bold')
                .text(function(d) { return d.node.title; });
            
            var textElements2  = g.append('g')
                .attr("class", "text")
                .selectAll('text')
                .data(nodeArr)
                .enter()
                .append('text')
                .attr('font-size', 15)
                .attr('dx', 20)
                .attr('dy', 15)
                .text(function(d) { return d.node.amount; });

            simulation
                .nodes(nodeArr)
                .on("tick", function() {
                    link
                        .attr("x1", function(d) { return d.source.x; })
                        .attr("y1", function(d) { return d.source.y; })
                        .attr("x2", function(d) { return d.target.x; })
                        .attr("y2", function(d) { return d.target.y; });

                    nodeObj
                        .attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
                        .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
                
                    textElements
                        .attr("x", function(d) { return d.x; })
                        .attr("y", function(d) { return d.y; });
                    textElements2
                        .attr("x", function(d) { return d.x; })
                        .attr("y", function(d) { return d.y; });
                });

            simulation.force("link")
                .links(link);

            
        })();
    </script>
}